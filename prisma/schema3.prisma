generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_URL")
  relationMode = "prisma"
}

model User {
  id                 String             @id @unique @default(cuid())
  email              String             @unique
  name               String?
  credits            Int                @default(10) // Default credits for free plan
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  subscription       Subscription?
  userCredits        UserCredits?
  userSubscription   UserSubscription?
  files              File[]
  creditTransactions CreditTransaction[]

  @@map("users")
}

model UserCredits {
  id          Int      @id @default(autoincrement())
  userId      String   @unique
  credits     Int      @default(0)
  usedCredits Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_credits")
}

model UserSubscription {
  id                     String             @id @unique @default(cuid())
  userId                 String             @unique
  stripeCustomerId       String?            @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?            @unique @map("stripe_subscription_id")
  stripePriceId          String?            @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?          @map("stripe_current_period_end")
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_subscription")
}

model CreditTransaction {
  id          Int              @id @default(autoincrement())
  userId      String
  type        TransactionType
  amount      Int
  description String
  timestamp   DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("credit_transactions")
}

enum TransactionType {
  DEDUCTION
  ADDITION
}

model File {
  id               Int               @id @default(autoincrement())
  userId           String            @map("user_id")
  createdAt        DateTime          @default(now()) @map("created_at")
  fileKey          String?           @unique @map("file_key")
  fileUrl          String?           @map("file_url")
  fileName         String            @map("file_name")
  type             String
  resultedFile     String?           @map("resulted_file")
  resultedFile2    String?           @map("resulted_file2")
  status           FileStatus        @default(PROCESSING)
  results          Json?

  fileGenerations  FileGeneration[]

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("files") 
}

model FileGeneration {
  requestId   String         @id @default(cuid())
  fileId      Int
  status      GenerationStatus
  downloadUrl String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  file File @relation(fields: [fileId], references: [id])

  @@map("file_generations")
}

enum FileStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum GenerationStatus {
  PROCESSING
  COMPLETED
  FAILED
}

model SubscriptionPlan {
  id                   String             @id @unique @default(cuid())
  name                 String             @unique
  price                Float
  credits              Int
  presentations        Int
  slidesPerPresentation Int
  canAddTransition     Boolean
  canUploadPDF         Boolean
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  // Opposite relation field
  subscriptions        Subscription[]     @relation("PlanSubscriptions")

  @@map("subscription_plans")
}

model Subscription {
  id                   String             @id @unique @default(cuid())
  userId               String             @unique
  planId               String
  stripeSubscriptionId String             @unique
  startsAt             DateTime           @default(now())
  endsAt               DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  user  User             @relation(fields: [userId], references: [id])
  plan  SubscriptionPlan @relation("PlanSubscriptions", fields: [planId], references: [id])

  @@map("subscriptions")
}
